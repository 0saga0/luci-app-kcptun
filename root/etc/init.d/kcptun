#!/bin/sh /etc/rc.common
#
# Copyright 2016-2017 Xingwang Liao <kuoruan@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

START=99
STOP=15
USE_PROCD=1

NAME=kcptun
DEFAULT_LOG_FOLDER=/var/log/$NAME
CONFIG_FOLDER=/var/etc/$NAME
DEFAULT_USER=root

if [ -r /usr/share/libubox/jshn.sh ]; then
	. /usr/share/libubox/jshn.sh
elif [ -r /lib/functions/jshn.sh ]; then
	. /lib/functions/jshn.sh
else
	logger -p daemon.err -t "$NAME" "Please install jshn first."
	exit 1
fi

_log() {
	local msg="$1"
	logger -p daemon.info -t "$NAME" "$msg"

	if ( is_enable_logging ); then
		echo "[INFO] $(date '+%Y/%m/%d %T') $msg" >>"$(get_log_folder)/event.log"
	fi
}

_err() {
	local msg="$1"
	logger -p daemon.err -t "$NAME" "$msg"

	if ( is_enable_logging ); then
		echo "[ERROR] $(date '+%Y/%m/%d %T') $msg" >>"$(get_log_folder)/event.log"
	fi
}

_cron_restart() {
	/etc/init.d/cron restart  >/dev/null 2>&1
}

_add_cron_script() {
	local entry="$1"
	if ! ( crontab -l | grep -q "$entry" ); then
		(crontab -l ; echo "$entry") | sort | uniq | crontab -
		_cron_restart
	fi
}

_rm_cron_script() {
	local entry="$1"
	if ( crontab -l | grep -q "$entry" ); then
		crontab -l | grep -v "$entry" | sort | uniq | crontab -
		_cron_restart
	fi
}

uci_get_by_type_option(){
	local type="$1"
	local option="$2"
	local default="$3"

	local ret
	ret="$(uci -q get ${NAME}.@${type}[-1].${option})"
	echo "${ret:=$default}"
}

get_log_folder() {
	if [ -z "$log_folder" ]; then
		log_folder=$(uci_get_by_type_option "general" "log_folder" "$DEFAULT_LOG_FOLDER")
	fi

	echo "$log_folder"
}

is_enable_logging() {
	if [ -z "$enable_logging" ]; then
		enable_logging=$(uci_get_by_type_option "general" "enable_logging" "0")
	fi

	[ ."$enable_logging" = ."1" ]
}

load_all_config_options() {
	local section_id="$1"

	local all_option_variables=""

	config_cb() {
		local name="$2"

		if [ ."$name" = ."$section_id" ]; then
			option_cb() {
				all_option_variables="$all_option_variables $1"
			}
		else
			option_cb() { return 0; }
		fi
	}

	config_load "$NAME"

	for var in $all_option_variables; do
		config_get "$var" "$section_id" "$var"
	done
}

is_ipv6_address() {
	echo "$1" | grep -q ":"
}

gen_client_config_file() {
	local section_id="$1"

	load_all_config_options "$section_id"

	local config_file=${CONFIG_FOLDER}/client.${section_id}.json

	[ -z "$server_addr" ] || [ -z "$server_port" ] || [ -z "$listen_port" ] && return 1

	is_ipv6_address "$server_addr" && server_addr="[${server_addr}]"
	is_ipv6_address "$listen_addr" && listen_addr="[${listen_addr}]"

	json_init
	json_add_string "remoteaddr" "${server_addr}:${server_port}"
	json_add_string "localaddr" "${listen_addr}:${listen_port}"

	add_configs() {
		local type="$1"; shift
		local k v

		for k in "$@"; do
			v="$(eval echo "\$$k")"

			if [ -n "$v" ]; then
				if [ "$type" = "string" ]; then
					json_add_string "$k" "$v"
				elif [ "$type" = "int" ]; then
					json_add_int "$k" "$v"
				elif [ "$type" = "boolean" ]; then
					json_add_boolean "$k" "$v"
				fi
			fi
		done
	}

	add_configs "string" key crypt mode
	add_configs "int" conn autoexpire mtu sndwnd rcvwnd datashard parityshard dscp \
		nodelay interval resend nc sockbuf keepalive scavengettl snmpperiod
	add_configs "boolean" nocomp acknodelay

	if ( is_enable_logging ); then
		json_add_string "log" "$(get_log_folder)/client.log"
	fi

	json_close_object

	if (json_dump -i > "$config_file"); then
		echo "$config_file"
	fi
}

setup_iptables() {
	iptables -N "$NAME" >/dev/null 2>&1
	iptables -F "$NAME" >/dev/null 2>&1

	iptables -C OUTPUT -j "$NAME" >/dev/null 2>&1 || \
		iptables -A OUTPUT -j "$NAME" >/dev/null 2>&1
	iptables -C INPUT -j "$NAME" >/dev/null 2>&1 || \
		iptables -A INPUT -j "$NAME" >/dev/null 2>&1
}

add_iptables_rule() {
	local port="$1"
	local comment="$2"

	iptables -A "$NAME" -p udp --dport "$port" -m comment --comment "$comment" -j ACCEPT
	iptables -A "$NAME" -p tcp --dport "$port" -m comment --comment "$comment" -j ACCEPT
}

setup_cron_task() {
	local script="/etc/init.d/${NAME}"
	clear_cron_entry() {
		_rm_cron_script "$script"
	}

	if [ -n "$auto_restart" ]; then
		local h m

		h=$(echo "${auto_restart}" | cut -d':' -f1)
		m=$(echo "${auto_restart}" | cut -d':' -f2)

		if [ -n "$h" ] && [ -n "$m" ]; then
			local entry="${m} ${h} * * * ${script} restart"
			_add_cron_script "$entry"
		else
			clear_cron_entry
		fi
	else
		clear_cron_entry
	fi
}

validate_server_section() {
	uci_validate_section "$NAME" servers "$1" \
		'server_addr:host' \
		'server_port:port' \
		'listen_addr:host' \
		'listen_port:port' \
		'conn:uinteger' \
		'autoexpire:uinteger' \
		'scavengettl:and(integer,min(-1))' \
		'mtu:and(uinteger,max(1500))' \
		'sndwnd:uinteger' \
		'rcvwnd:uinteger' \
		'datashard:uinteger' \
		'parityshard:uinteger' \
		'dscp:uinteger' \
		'nocomp:bool' \
		'nodelay:bool' \
		'interval:uinteger' \
		'resend:range(0,2)' \
		'nc:bool' \
		'acknodelay:bool' \
		'sockbuf:uinteger' \
		'keepalive:uinteger' \
		'snmpperiod:and(uinteger,min(1))'
}

validate_client_file() {
	local file="$1"

	if [ ! -f "$file" ]; then
		return 1
	fi

	[ -x "$file" ] || chmod +x "$file"

	( $file -v | grep -q "$NAME" )
}

service_triggers() {
	procd_add_reload_trigger "$NAME"
}

start_service() {
	kcptun_server=$(uci_get_by_type_option "general" "server")
	client_file=$(uci_get_by_type_option "general" "client_file")
	daemon_user=$(uci_get_by_type_option "general" "daemon_user" "$DEFAULT_USER")
	auto_restart=$(uci_get_by_type_option "general" "auto_restart")

	setup_cron_task

	[ -z "$kcptun_server" ] || [ "$kcptun_server" = "nil" ] && { _log "Client will stop."; return 0; }
	validate_server_section "$kcptun_server" || { _err "Server config validation failed."; return 1; }

	[ -z "$client_file" ] && { _err "Please set client file path."; return 1; }
	validate_client_file "$client_file" || { _err "Client file validation failed."; return 1; }

	if ( is_enable_logging ); then
		mkdir -p "$CONFIG_FOLDER" "$(get_log_folder)"
		chown -R "$daemon_user" "$(get_log_folder)"
	fi

	client_config_file="$(gen_client_config_file "$kcptun_server")"

	if [ -r "$client_config_file" ]; then
		setup_iptables
		add_iptables_rule "$listen_port" "client"

		procd_open_instance
		procd_set_param command "$client_file"
		procd_append_param command -c "$client_config_file"
		procd_set_param respawn
		procd_set_param user "$daemon_user"
		procd_set_param file "$client_config_file"
		procd_add_jail_mount "$client_config_file"
		procd_add_jail_mount_rw "$log_folder"
		procd_close_instance

		_log "Service started."
	fi
}

stop_service() {
	_log "Service stoped."
}

restart() {
	_log "Restart begin..."
	stop
	start
}

boot() {
	ubus -t 30 wait_for network.interface 2>/dev/null
	rc_procd start_service
}
